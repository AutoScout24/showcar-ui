require 'rubygems'
require 'bundler/setup'
require 'json'
require 'aws-sdk-core'
require 'autostacker24'
require 'base64'
require 'mime/types'

Aws.use_bundled_cert!

SERVICE = 'showcar-ui'
REGION = ENV['REGION'] || 'eu-west-1'
S3_ARTIFACTS_BUCKET = (ENV['SANDBOX'] || "as24") + "-showcar-ui.aws.autoscout24.com"
VERSION  = ENV['VERSION'] || ENV['GO_PIPELINE_LABEL']
SANDBOX  = ENV['SANDBOX'] || ENV['GO_JOB_NAME'].nil? && `whoami`.strip
STACK    = SANDBOX ? "#{SANDBOX}-#{SERVICE}" : SERVICE
GLOBAL   = ENV['GLOBAL'] || 'global'
TEMPLATE = 'showcar-ui-stack.json'

Aws.config = { region: REGION }

desc 'create or update stack'
task :create_or_update do
  prod = Stacker.get_stack_output(GLOBAL)[:AccountName] =~ /as24prod/i
  fail('VERSION missing') unless VERSION #TODO: determine latest green version for sandboxed deploy
  if prod
    fail('SECRET missing') unless secret
  else
    secret = "DEV_ENV_SECRET" unless secret
  end

  parameters = {
      AuthRole:               ENV['AUTH_ROLE'] || SERVICE,
      Service:                SERVICE,
      Version:                VERSION,
      S3ArtifactsBucket:      S3_ARTIFACTS_BUCKET
  }
  Stacker.create_or_update_stack(STACK, TEMPLATE, parameters, GLOBAL)
end

desc 'delete stack'
task :delete do
  Stacker.delete_stack(STACK)
end

desc 'echoes the parameters'
task :params do
  puts "S3_ARTIFACTS_BUCKET=" + S3_ARTIFACTS_BUCKET
end

desc 'run integration tests'
task :test do
  subdomain = Stacker.get_stack_output(GLOBAL)[:AccountSubDomain]
end

desc 'deploy service'
task :deploy => [:create_or_update, :test, :publish] do
end

desc 'validate template'
task :validate do
  Stacker.validate_template(TEMPLATE)
end

desc 'dump template'
task :dump do
  puts JSON.pretty_generate(JSON(Stacker.template_body(TEMPLATE)))
end

task :default do
  puts
  puts 'Use one of the available tasks:'
  puts "Current stack is #{STACK}\n"
  system 'rake -T'
end

def kms_decrypt_credentials(cipher_text)
  kms = Aws::KMS::Client.new
  kms.decrypt({ciphertext_blob: Base64.decode64(cipher_text)}).plaintext
end

desc "publish"
task :publish do
  Dir.chdir('../')
  dist = Dir['dist/**/*'].select { |f| File.file?(f) }
  docs = Dir['docs/**/*'].select { |f| File.file?(f) }
  examples = Dir['examples/**/*'].select { |f| File.file?(f) }
  artifacts = dist + docs + examples

  s3 = Aws::S3::Client.new

  artifacts.each {
      |file|
        content_type = MIME::Types.type_for(file)[0]
        s3.put_object(bucket: S3_ARTIFACTS_BUCKET,
                  key: file,
                  body: File.read(file),
                  content_type: content_type.to_s,
                  acl: 'public-read')

    log "Copied file: #{file}"
  }
end

def log(str)
  $stdout.puts str
  $stdout.flush
end